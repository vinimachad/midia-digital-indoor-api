// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model News {
  id        String   @id
  index     Int      @default(autoincrement())
  type      String
  title     String
  image_url String
  qrcode    String
  delay     Int
  url       String?
  createdAt DateTime @default(now())
}

model Weather {
  id             String     @id
  temp           String
  description    String
  sunrise        String
  sunset         String
  condition_slug String
  city_name      String
  created_at     DateTime   @default(now())
  forecast       Forecast[]
}

model Forecast {
  id          String   @id @default(uuid())
  index       Int
  date        String
  weekday     String
  max         String
  min         String
  description String
  condition   String
  created_at  DateTime @default(now())
  Weather     Weather? @relation(fields: [weatherId], references: [id])
  weatherId   String?
}

model Banner {
  id  String @id @default(uuid())
  url String
}

model User {
  id              String         @id @default(uuid())
  full_name       String
  email           String         @unique
  password        String
  phone_number    String         @unique
  refresh_tokens  RefreshToken[]
  commercial      Commercial[]
  subscription    Subscription?  @relation(fields: subscription_id, references: id)
  subscription_id String?        @unique
}

model RefreshToken {
  id            String   @id @default(uuid())
  refresh_token String
  expires_date  String
  created_at    DateTime @default(now())
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Subscription {
  id                   String             @id
  plan_id              String             @unique
  customer_id          String             @unique
  product_id           String?            @unique
  value                Decimal
  status               SubscriptionStatus
  user                 User?
  created_at           DateTime           @default(now())
  updated_at           DateTime           @default(now())
  cancel_at            BigInt?
  canceled_at          BigInt?
  current_period_end   BigInt
  current_period_start BigInt
}

model Commercial {
  id          String           @id
  index       Int
  title       String
  status      CommercialStatus @default(PENDING_ANALYSIS)
  description String
  url         String?
  user        User             @relation(fields: [user_id], references: [id])
  user_id     String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now())
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
}

enum CommercialStatus {
  PENDING_ANALYSIS
  ACTIVE
}
